# nginx/load-balancer.conf
# Advanced Load Balancer Configuration for SPOPA System

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Optimize worker connections
events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enhanced logging format for load balancing
    log_format load_balanced '$remote_addr - $remote_user [$time_local] "$request" '
                           '$status $body_bytes_sent "$http_referer" '
                           '"$http_user_agent" "$http_x_forwarded_for" '
                           'rt=$request_time uct="$upstream_connect_time" '
                           'uht="$upstream_header_time" urt="$upstream_response_time" '
                           'upstream_addr="$upstream_addr" upstream_status="$upstream_status"';

    access_log /var/log/nginx/access.log load_balanced;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    # Buffer optimization
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=admin:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=200r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;

    # Define upstream groups for load balancing
    
    # Frontend server pool (multiple instances)
    upstream frontend_pool {
        # Load balancing method: least_conn for better distribution
        least_conn;
        
        # Frontend instances
        server fe_server_1:3001 weight=3 max_fails=2 fail_timeout=30s;
        server fe_server_2:3001 weight=3 max_fails=2 fail_timeout=30s;
        server fe_server_3:3001 weight=2 max_fails=2 fail_timeout=30s;
        
        # Backup server
        server fe_server_backup:3001 backup;
        
        # Keep alive connections for better performance
        keepalive 32;
        keepalive_timeout 60s;
        keepalive_requests 100;
    }

    # API Gateway pool (multiple instances)
    upstream api_gateway_pool {
        # IP hash for session affinity if needed
        # ip_hash;
        
        # Round robin with health checks
        server api_gateway_1:8080 weight=4 max_fails=3 fail_timeout=30s;
        server api_gateway_2:8080 weight=4 max_fails=3 fail_timeout=30s;
        server api_gateway_3:8080 weight=3 max_fails=3 fail_timeout=30s;
        
        # Backup gateway
        server api_gateway_backup:8080 backup;
        
        keepalive 64;
        keepalive_timeout 60s;
        keepalive_requests 1000;
    }

    # Admin Service pool (multiple instances)
    upstream admin_service_pool {
        # Least connections for admin operations
        least_conn;
        
        server ss_admin_ms_1:8000 weight=3 max_fails=2 fail_timeout=20s;
        server ss_admin_ms_2:8000 weight=3 max_fails=2 fail_timeout=20s;
        server ss_admin_ms_3:8000 weight=2 max_fails=2 fail_timeout=20s;
        
        # Backup admin service
        server ss_admin_ms_backup:8000 backup;
        
        keepalive 16;
    }

    # MongoDB pool (read replicas for scaling reads)
    upstream mongodb_pool {
        # Primary-secondary setup
        server mongo_primary:27017 weight=10;
        server mongo_secondary_1:27017 weight=1 backup;
        server mongo_secondary_2:27017 weight=1 backup;
    }

    # Health check configuration
    upstream_conf {
        # This would require nginx-plus or custom health check module
        # For open source nginx, we rely on passive health checks
    }

    # Main server block with load balancing
    server {
        listen 80;
        listen [::]:80;
        server_name localhost spopa.local *.spopa.com;

        # Connection limits
        limit_conn perip 50;
        limit_conn perserver 1000;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-Load-Balancer "SPOPA-LB" always;

        # Frontend application with load balancing
        location / {
            limit_req zone=general burst=50 nodelay;
            
            proxy_pass http://frontend_pool;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Load-Balancer-Server $upstream_addr;
            
            # Timeouts and buffering
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Cache bypass
            proxy_cache_bypass $http_upgrade $cookie_nocache $arg_nocache;
            proxy_no_cache $http_upgrade $cookie_nocache $arg_nocache;
            
            # Error handling
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_timeout 10s;
            proxy_next_upstream_tries 3;
        }

        # API Gateway routes with advanced load balancing
        location /api/gateway/ {
            limit_req zone=api burst=100 nodelay;
            
            proxy_pass http://api_gateway_pool/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header X-Load-Balancer-Server $upstream_addr;
            
            # Sticky sessions if needed (requires nginx-plus)
            # sticky cookie srv_id expires=1h domain=.spopa.com path=/;
            
            # Performance settings
            proxy_connect_timeout 3s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_buffering on;
            
            # Load balancing error handling
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_next_upstream_timeout 15s;
            proxy_next_upstream_tries 3;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
            add_header Access-Control-Expose-Headers "X-Load-Balancer-Server" always;
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # Admin API with dedicated load balancing
        location /api/admin/ {
            limit_req zone=admin burst=30 nodelay;
            
            # Route directly to admin service pool
            proxy_pass http://admin_service_pool/api/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Admin-Request "true";
            proxy_set_header X-Load-Balancer-Server $upstream_addr;
            
            # Admin-specific timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Retry logic for admin operations
            proxy_next_upstream error timeout http_502 http_503;
            proxy_next_upstream_timeout 20s;
            proxy_next_upstream_tries 2;
        }

        # Load balancer status and monitoring
        location /lb-status {
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            return 200 "SPOPA Load Balancer Status: OK\nTimestamp: $time_iso8601\nUpstreams: frontend_pool, api_gateway_pool, admin_service_pool\n";
            add_header Content-Type text/plain;
        }

        # Health check endpoints
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
            add_header X-Load-Balancer "SPOPA-LB";
        }

        # Upstream health checks (proxy to each pool)
        location /health/frontend {
            access_log off;
            proxy_pass http://frontend_pool/api/health;
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
        }

        location /health/gateway {
            access_log off;
            proxy_pass http://api_gateway_pool/health;
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
        }

        location /health/admin {
            access_log off;
            proxy_pass http://admin_service_pool/health;
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
        }

        # Static assets with caching and load balancing
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend_pool;
            
            # Caching configuration
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # Compression
            gzip_static on;
            
            # Load balancing for static content
            proxy_next_upstream error timeout http_404;
            proxy_connect_timeout 2s;
            proxy_read_timeout 10s;
        }

        # WebSocket support with load balancing
        location /ws/ {
            proxy_pass http://frontend_pool;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific settings
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
            
            # Sticky sessions for WebSocket
            # ip_hash; # Uncomment if session affinity is needed
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
            add_header X-Load-Balancer "SPOPA-LB";
        }

        location = /404.html {
            root /usr/share/nginx/html;
            add_header X-Load-Balancer "SPOPA-LB";
        }
    }

    # SSL/TLS server block with load balancing
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name localhost spopa.local *.spopa.com;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # HSTS and security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Load-Balancer "SPOPA-LB-SSL" always;

        # Same location blocks as HTTP but with HTTPS context
        location / {
            limit_req zone=general burst=50 nodelay;
            proxy_pass http://frontend_pool;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Load-Balancer-Server $upstream_addr;
            proxy_cache_bypass $http_upgrade;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        location /api/gateway/ {
            limit_req zone=api burst=100 nodelay;
            proxy_pass http://api_gateway_pool/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Load-Balancer-Server $upstream_addr;
            proxy_next_upstream error timeout http_502 http_503 http_504;
        }

        location /api/admin/ {
            limit_req zone=admin burst=30 nodelay;
            proxy_pass http://admin_service_pool/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Load-Balancer-Server $upstream_addr;
            proxy_next_upstream error timeout http_502 http_503;
        }
    }

    # Load balancing statistics (requires nginx-plus or lua module)
    # server {
    #     listen 8080;
    #     location /status {
    #         status;
    #         access_log off;
    #     }
    # }
}